
R version 2.7.1 (2008-06-23)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(na.action=na.exclude) # preserve missings
> options(contrasts=c('contr.treatment', 'contr.poly')) #ensure constrast type
> library(survival)
Loading required package: splines
> 
> #
> # The residual methods treat a sparse frailty as a fixed offset with
> #   no variance
> #
> aeq <- function(x,y, ...) all.equal(as.vector(x), as.vector(y), ...)
> 
> kfit1 <- coxph(Surv(time, status) ~ age + sex + 
+ 	           frailty(id, dist='gauss'), kidney)
> tempf <- predict(kfit1, type='terms')[,3]
> temp  <- kfit1$frail[match(kidney$id, sort(unique(kidney$id)))]
> #all.equal(unclass(tempf), unclass(temp))
> all.equal(as.vector(tempf), as.vector(temp))
[1] TRUE
> 
> # Now fit a model with explicit offset
> kfitx <- coxph(Surv(time, status) ~ age + sex + offset(tempf),kidney,
+ 	       eps=1e-7)
> 
> # These are not precisely the same, due to different iteration paths
> aeq(kfitx$coef, kfit1$coef)
[1] TRUE
> 
> # This will make them identical
> kfitx <- coxph(Surv(time, status) ~ age + sex  + offset(temp),kidney,
+ 	       iter=0, init=kfit1$coef)
> aeq(resid(kfit1), resid(kfitx))
[1] TRUE
> aeq(resid(kfit1, type='score'), resid(kfitx, type='score'))
[1] TRUE
> aeq(resid(kfit1, type='schoe'), resid(kfitx, type='schoe'))
[1] TRUE
> 
> # These are not the same, due to a different variance matrix
> #  The frailty model's variance is about 2x the naive "assume an offset" var
> # The score residuals are equal, however.
> aeq(resid(kfit1, type='dfbeta'), resid(kfitx, type='dfbeta'))
[1] "Mean relative difference: 0.5214642"
> zed <- kfitx
> zed$var <- kfit1$var
> aeq(resid(kfit1, type='dfbeta'), resid(zed, type='dfbeta'))
[1] TRUE
> 
> 
> temp1 <- resid(kfit1, type='score')
> temp2 <- resid(kfitx, type='score')
> aeq(temp1, temp2)
[1] TRUE
> 
> #
> # Now for some tests of predicted values
> #
> aeq(predict(kfit1, type='expected'), predict(kfitx, type='expected'))
[1] TRUE
> aeq(predict(kfit1, type='lp'), predict(kfitx, type='lp'))
[1] TRUE
> 
> temp1 <- predict(kfit1, type='terms', se.fit=T)
> temp2 <- predict(kfitx, type='terms', se.fit=T)
> aeq(temp1$fit[,1:2], temp2$fit)
[1] TRUE
> aeq(temp1$se.fit[,1:2], temp2$se.fit)  #should be false
[1] "Mean relative difference: 0.3023202"
> mean(temp1$se.fit[,1:2]/ temp2$se.fit)
[1] 1.432742
> aeq(as.vector(temp1$se.fit[,3])^2, 
+ 	  as.vector(kfit1$fvar[match(kidney$id, sort(unique(kidney$id)))]))
[1] TRUE
> 
> print(temp1)
$fit
            age        sex frailty(id, dist = "gauss")
1  -0.073958502  1.0394106                  0.59786111
2  -0.073958502  1.0394106                  0.59786111
3   0.020271945 -0.3712181                  0.38485832
4   0.020271945 -0.3712181                  0.38485832
5  -0.055112412  1.0394106                  0.20207583
6  -0.055112412  1.0394106                  0.20207583
7  -0.059823935 -0.3712181                 -0.55911485
8  -0.055112412 -0.3712181                 -0.55911485
9  -0.158765904  1.0394106                  0.28549873
10 -0.158765904  1.0394106                  0.28549873
11 -0.130496770 -0.3712181                  0.06626061
12 -0.125785247 -0.3712181                  0.06626061
13  0.034406512  1.0394106                  0.80459000
14  0.034406512  1.0394106                  0.80459000
15  0.053252601 -0.3712181                 -0.43812823
16  0.057964123 -0.3712181                 -0.43812823
17  0.119213914 -0.3712181                 -0.05626582
18  0.119213914 -0.3712181                 -0.05626582
19  0.034406512  1.0394106                 -0.49952683
20  0.039118034  1.0394106                 -0.49952683
21  0.001425855 -0.3712181                 -0.13020461
22  0.001425855 -0.3712181                 -0.13020461
23 -0.045689368 -0.3712181                  0.06374081
24 -0.045689368 -0.3712181                  0.06374081
25 -0.040977845 -0.3712181                  0.38796289
26 -0.040977845 -0.3712181                  0.38796289
27 -0.007997189 -0.3712181                 -0.47624190
28 -0.007997189 -0.3712181                 -0.47624190
29 -0.125785247 -0.3712181                 -0.66954879
30 -0.125785247 -0.3712181                 -0.66954879
31  0.076810213  1.0394106                  0.19352414
32  0.076810213  1.0394106                  0.19352414
33  0.076810213 -0.3712181                 -0.16474469
34  0.076810213 -0.3712181                 -0.16474469
35 -0.003285667 -0.3712181                 -0.15787841
36  0.001425855 -0.3712181                 -0.15787841
37  0.043829556 -0.3712181                 -0.46209283
38  0.043829556 -0.3712181                 -0.46209283
39  0.001425855 -0.3712181                  0.12596115
40  0.001425855 -0.3712181                  0.12596115
41  0.010848900  1.0394106                 -1.74241816
42  0.015560422  1.0394106                 -1.74241816
43 -0.064535457 -0.3712181                 -0.45191179
44 -0.064535457 -0.3712181                 -0.45191179
45  0.086233257 -0.3712181                  0.51548896
46  0.090944780 -0.3712181                  0.51548896
47 -0.007997189 -0.3712181                  0.09469348
48 -0.003285667 -0.3712181                  0.09469348
49 -0.003285667  1.0394106                  0.05795548
50 -0.003285667  1.0394106                  0.05795548
51  0.062675646 -0.3712181                 -0.37915463
52  0.067387168 -0.3712181                 -0.37915463
53 -0.158765904 -0.3712181                  0.11243130
54 -0.158765904 -0.3712181                  0.11243130
55  0.039118034 -0.3712181                  0.54762574
56  0.039118034 -0.3712181                  0.54762574
57  0.043829556  1.0394106                  0.45856914
58  0.043829556  1.0394106                  0.45856914
59  0.048541079 -0.3712181                  0.35623967
60  0.048541079 -0.3712181                  0.35623967
61  0.057964123 -0.3712181                  0.48779202
62  0.057964123 -0.3712181                  0.48779202
63  0.029694989 -0.3712181                  0.25581783
64  0.034406512 -0.3712181                  0.25581783
65  0.062675646 -0.3712181                  0.23046401
66  0.062675646 -0.3712181                  0.23046401
67  0.001425855 -0.3712181                 -0.13672108
68  0.006137378 -0.3712181                 -0.13672108
69 -0.102227636 -0.3712181                  0.51950930
70 -0.102227636 -0.3712181                  0.51950930
71 -0.007997189 -0.3712181                 -0.23862674
72 -0.007997189 -0.3712181                 -0.23862674
73  0.039118034 -0.3712181                  0.17164824
74  0.039118034 -0.3712181                  0.17164824
75  0.076810213  1.0394106                 -0.35798941
76  0.076810213  1.0394106                 -0.35798941

$se.fit
           age       sex frailty(id, dist = "gauss")
1  0.195822035 0.3279661                   0.6244919
2  0.195822035 0.3279661                   0.6244919
3  0.053674606 0.1171308                   0.6952595
4  0.053674606 0.1171308                   0.6952595
5  0.145922707 0.3279661                   0.5704061
6  0.145922707 0.3279661                   0.5704061
7  0.158397539 0.1171308                   0.4893554
8  0.145922707 0.1171308                   0.4893554
9  0.420369012 0.3279661                   0.6069822
10 0.420369012 0.3279661                   0.6069822
11 0.345520020 0.1171308                   0.5632659
12 0.333045188 0.1171308                   0.5632659
13 0.091099103 0.3279661                   0.6639923
14 0.091099103 0.3279661                   0.6639923
15 0.140998431 0.1171308                   0.5100815
16 0.153473263 0.1171308                   0.5100815
17 0.315646080 0.1171308                   0.5490307
18 0.315646080 0.1171308                   0.5490307
19 0.091099103 0.3279661                   0.5262813
20 0.103573935 0.3279661                   0.5262813
21 0.003775278 0.1171308                   0.5179992
22 0.003775278 0.1171308                   0.5179992
23 0.120973042 0.1171308                   0.6207106
24 0.120973042 0.1171308                   0.6207106
25 0.108498210 0.1171308                   0.5810134
26 0.108498210 0.1171308                   0.5810134
27 0.021174386 0.1171308                   0.6245776
28 0.021174386 0.1171308                   0.6245776
29 0.333045188 0.1171308                   0.5614453
30 0.333045188 0.1171308                   0.5614453
31 0.203372591 0.3279661                   0.6530508
32 0.203372591 0.3279661                   0.6530508
33 0.203372591 0.1171308                   0.5246117
34 0.203372591 0.1171308                   0.5246117
35 0.008699554 0.1171308                   0.5105633
36 0.003775278 0.1171308                   0.5105633
37 0.116048767 0.1171308                   0.6282338
38 0.116048767 0.1171308                   0.6282338
39 0.003775278 0.1171308                   0.6318230
40 0.003775278 0.1171308                   0.6318230
41 0.028724942 0.3279661                   0.5233805
42 0.041199774 0.3279661                   0.5233805
43 0.170872371 0.1171308                   0.5490773
44 0.170872371 0.1171308                   0.5490773
45 0.228322255 0.1171308                   0.6057277
46 0.240797087 0.1171308                   0.6057277
47 0.021174386 0.1171308                   0.6266224
48 0.008699554 0.1171308                   0.6266224
49 0.008699554 0.3279661                   0.5525454
50 0.008699554 0.3279661                   0.5525454
51 0.165948095 0.1171308                   0.5555328
52 0.178422927 0.1171308                   0.5555328
53 0.420369012 0.1171308                   0.5848260
54 0.420369012 0.1171308                   0.5848260
55 0.103573935 0.1171308                   0.6080357
56 0.103573935 0.1171308                   0.6080357
57 0.116048767 0.3279661                   0.6008923
58 0.116048767 0.3279661                   0.6008923
59 0.128523599 0.1171308                   0.5760879
60 0.128523599 0.1171308                   0.5760879
61 0.153473263 0.1171308                   0.5981138
62 0.153473263 0.1171308                   0.5981138
63 0.078624270 0.1171308                   0.6612065
64 0.091099103 0.1171308                   0.6612065
65 0.165948095 0.1171308                   0.5608325
66 0.165948095 0.1171308                   0.5608325
67 0.003775278 0.1171308                   0.5843468
68 0.016250110 0.1171308                   0.5843468
69 0.270671027 0.1171308                   0.6088168
70 0.270671027 0.1171308                   0.6088168
71 0.021174386 0.1171308                   0.6793365
72 0.021174386 0.1171308                   0.6793365
73 0.103573935 0.1171308                   0.6419952
74 0.103573935 0.1171308                   0.6419952
75 0.203372591 0.3279661                   0.5778115
76 0.203372591 0.3279661                   0.5778115

> kfit1
Call:
coxph(formula = Surv(time, status) ~ age + sex + frailty(id, 
    dist = "gauss"), data = kidney)

                          coef     se(coef) se2     Chisq DF   p     
age                        0.00471 0.0125   0.00856  0.14  1.0 0.7100
sex                       -1.41063 0.4451   0.31503 10.04  1.0 0.0015
frailty(id, dist = "gauss                           26.54 14.7 0.0290

Iterations: 6 outer, 28 Newton-Raphson
     Variance of random effect= 0.569 
Degrees of freedom for terms=  0.5  0.5 14.7 
Likelihood ratio test=47.5  on 15.7 df, p=4.65e-05  n= 76 
> kfitx
Call:
coxph(formula = Surv(time, status) ~ age + sex + offset(temp), 
    data = kidney, init = kfit1$coef, iter = 0)


        coef exp(coef) se(coef)      z       p
age  0.00471     1.005  0.00875  0.538 5.9e-01
sex -1.41063     0.244  0.30916 -4.563 5.0e-06

Likelihood ratio test=0  on 2 df, p=1  n= 76 
> 
> rm(temp1, temp2, kfitx, zed, tempf)
> #
> # The special case of a single sparse frailty
> #
> 
> kfit1 <- coxph(Surv(time, status) ~ frailty(id, dist='gauss'), kidney)
> tempf <- predict(kfit1, type='terms')
> temp  <- kfit1$frail[match(kidney$id, sort(unique(kidney$id)))]
> all.equal(as.vector(tempf), as.vector(temp))
[1] TRUE
> 
> # Now fit a model with explicit offset
> kfitx <- coxph(Surv(time, status) ~ offset(tempf),kidney, eps=1e-7)
> 
> aeq(resid(kfit1), resid(kfitx))
[1] TRUE
> aeq(resid(kfit1, type='deviance'), resid(kfitx, type='deviance'))
[1] TRUE
> 
> #
> # Some tests of predicted values
> #
> aeq <- function(x,y) all.equal(as.vector(x), as.vector(y))
> aeq(predict(kfit1, type='expected'), predict(kfitx, type='expected'))
[1] TRUE
> aeq(predict(kfit1, type='lp'), predict(kfitx, type='lp'))
[1] TRUE
> 
> temp1 <- predict(kfit1, type='terms', se.fit=T)
> aeq(temp1$fit, kfitx$linear)
[1] TRUE
> aeq(temp1$se.fit^2, 
+ 	  kfit1$fvar[match(kidney$id, sort(unique(kidney$id)))])
[1] TRUE
> 
> temp1
$fit
 [1]  0.695322941  0.695322941  0.244363776  0.244363776  0.493777896
 [6]  0.493777896 -0.658879753 -0.658879753  0.520994314  0.520994314
[11] -0.114379760 -0.114379760  0.799261991  0.799261991 -0.487795409
[16] -0.487795409 -0.120271844 -0.120271844  0.131081160  0.131081160
[21] -0.214822375 -0.214822375 -0.054773695 -0.054773695  0.184575874
[26]  0.184575874 -0.509525783 -0.509525783 -0.790241403 -0.790241403
[31]  0.324356959  0.324356959 -0.239177390 -0.239177390 -0.264230973
[36] -0.264230973 -0.472242362 -0.472242362  0.006350496  0.006350496
[41] -0.872904122 -0.872904122 -0.530513459 -0.530513459  0.351179181
[46]  0.351179181 -0.037129299 -0.037129299  0.441718240  0.441718240
[51] -0.418876639 -0.418876639 -0.107887816 -0.107887816  0.346099359
[56]  0.346099359  0.658680102  0.658680102  0.197185714  0.197185714
[61]  0.304679320  0.304679320  0.139630271  0.139630271  0.093562534
[66]  0.093562534 -0.209483283 -0.209483283  0.301887374  0.301887374
[71] -0.278636264 -0.278636264  0.068590872  0.068590872  0.078473259
[76]  0.078473259

$se.fit
 [1] 0.6147113 0.6147113 0.6157024 0.6157024 0.5713312 0.5713312 0.4392271
 [8] 0.4392271 0.5759022 0.5759022 0.4832712 0.4832712 0.6417752 0.6417752
[15] 0.4573402 0.4573402 0.4812024 0.4812024 0.5118065 0.5118065 0.4762681
[22] 0.4762681 0.5530110 0.5530110 0.5193604 0.5193604 0.5531610 0.5531610
[29] 0.4773814 0.4773814 0.6361045 0.6361045 0.4707460 0.4707460 0.4669424
[36] 0.4669424 0.5597930 0.5597930 0.5639378 0.5639378 0.4648879 0.4648879
[43] 0.4902904 0.4902904 0.5446419 0.5446419 0.5567662 0.5567662 0.5606017
[50] 0.5606017 0.4994076 0.4994076 0.4830103 0.4830103 0.5450207 0.5450207
[57] 0.6054682 0.6054682 0.5207580 0.5207580 0.5374623 0.5374623 0.5908553
[64] 0.5908553 0.5063650 0.5063650 0.5288166 0.5288166 0.5366511 0.5366511
[71] 0.5992889 0.5992889 0.5760201 0.5760201 0.5780104 0.5780104

> kfit1
Call:
coxph(formula = Surv(time, status) ~ frailty(id, dist = "gauss"), 
    data = kidney)

                          coef se(coef) se2 Chisq DF   p    
frailty(id, dist = "gauss                   23.0  13.8 0.057

Iterations: 6 outer, 28 Newton-Raphson
     Variance of random effect= 0.457 
Degrees of freedom for terms= 13.8 
Likelihood ratio test=33.4  on 13.8 df, p=0.00234  n= 76 
> 
> 
> 
